"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class state_est_debug_lcmt(object):
    __slots__ = ["p_f", "y", "y_model", "ey", "xhat", "a", "trusts"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[12], [28], [28], [28], [18], [4], [4]]

    def __init__(self):
        self.p_f = [ 0.0 for dim0 in range(12) ]
        self.y = [ 0.0 for dim0 in range(28) ]
        self.y_model = [ 0.0 for dim0 in range(28) ]
        self.ey = [ 0.0 for dim0 in range(28) ]
        self.xhat = [ 0.0 for dim0 in range(18) ]
        self.a = [ 0.0 for dim0 in range(4) ]
        self.trusts = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(state_est_debug_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12f', *self.p_f[:12]))
        buf.write(struct.pack('>28f', *self.y[:28]))
        buf.write(struct.pack('>28f', *self.y_model[:28]))
        buf.write(struct.pack('>28f', *self.ey[:28]))
        buf.write(struct.pack('>18f', *self.xhat[:18]))
        buf.write(struct.pack('>4f', *self.a[:4]))
        buf.write(struct.pack('>4f', *self.trusts[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != state_est_debug_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return state_est_debug_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = state_est_debug_lcmt()
        self.p_f = struct.unpack('>12f', buf.read(48))
        self.y = struct.unpack('>28f', buf.read(112))
        self.y_model = struct.unpack('>28f', buf.read(112))
        self.ey = struct.unpack('>28f', buf.read(112))
        self.xhat = struct.unpack('>18f', buf.read(72))
        self.a = struct.unpack('>4f', buf.read(16))
        self.trusts = struct.unpack('>4f', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if state_est_debug_lcmt in parents: return 0
        tmphash = (0xd817bcd518e85da5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if state_est_debug_lcmt._packed_fingerprint is None:
            state_est_debug_lcmt._packed_fingerprint = struct.pack(">Q", state_est_debug_lcmt._get_hash_recursive([]))
        return state_est_debug_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", state_est_debug_lcmt._get_packed_fingerprint())[0]

