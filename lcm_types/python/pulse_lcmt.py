"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class pulse_lcmt(object):
    __slots__ = ["hearbeat", "can_interface", "imu_status", "leg_status", "update_param_response"]

    __typenames__ = ["int8_t", "int8_t", "int8_t", "int8_t", "int8_t"]

    __dimensions__ = [None, [4], None, None, None]

    def __init__(self):
        self.hearbeat = 0
        self.can_interface = [ 0 for dim0 in range(4) ]
        self.imu_status = 0
        self.leg_status = 0
        self.update_param_response = 0

    def encode(self):
        buf = BytesIO()
        buf.write(pulse_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">b", self.hearbeat))
        buf.write(struct.pack('>4b', *self.can_interface[:4]))
        buf.write(struct.pack(">bbb", self.imu_status, self.leg_status, self.update_param_response))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != pulse_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return pulse_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = pulse_lcmt()
        self.hearbeat = struct.unpack(">b", buf.read(1))[0]
        self.can_interface = struct.unpack('>4b', buf.read(4))
        self.imu_status, self.leg_status, self.update_param_response = struct.unpack(">bbb", buf.read(3))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if pulse_lcmt in parents: return 0
        tmphash = (0xa01dc496bbad3f22) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if pulse_lcmt._packed_fingerprint is None:
            pulse_lcmt._packed_fingerprint = struct.pack(">Q", pulse_lcmt._get_hash_recursive([]))
        return pulse_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", pulse_lcmt._get_packed_fingerprint())[0]

