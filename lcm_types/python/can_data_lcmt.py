"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class can_data_lcmt(object):
    __slots__ = ["q_abad", "q_hip", "q_knee", "qd_abad", "qd_hip", "qd_knee"]

    __typenames__ = ["float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[4], [4], [4], [4], [4], [4]]

    def __init__(self):
        self.q_abad = [ 0.0 for dim0 in range(4) ]
        self.q_hip = [ 0.0 for dim0 in range(4) ]
        self.q_knee = [ 0.0 for dim0 in range(4) ]
        self.qd_abad = [ 0.0 for dim0 in range(4) ]
        self.qd_hip = [ 0.0 for dim0 in range(4) ]
        self.qd_knee = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(can_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>4f', *self.q_abad[:4]))
        buf.write(struct.pack('>4f', *self.q_hip[:4]))
        buf.write(struct.pack('>4f', *self.q_knee[:4]))
        buf.write(struct.pack('>4f', *self.qd_abad[:4]))
        buf.write(struct.pack('>4f', *self.qd_hip[:4]))
        buf.write(struct.pack('>4f', *self.qd_knee[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != can_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return can_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = can_data_lcmt()
        self.q_abad = struct.unpack('>4f', buf.read(16))
        self.q_hip = struct.unpack('>4f', buf.read(16))
        self.q_knee = struct.unpack('>4f', buf.read(16))
        self.qd_abad = struct.unpack('>4f', buf.read(16))
        self.qd_hip = struct.unpack('>4f', buf.read(16))
        self.qd_knee = struct.unpack('>4f', buf.read(16))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if can_data_lcmt in parents: return 0
        tmphash = (0xc51e25da55f0463d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if can_data_lcmt._packed_fingerprint is None:
            can_data_lcmt._packed_fingerprint = struct.pack(">Q", can_data_lcmt._get_hash_recursive([]))
        return can_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", can_data_lcmt._get_packed_fingerprint())[0]

